# -*- coding: utf-8 -*-
"""movierecommendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19RhYTv4MLA-Ffwv5-C0VMYlzb6KbvVTa
"""

import pandas as pd
import numpy as np

movies=pd.read_csv('tmdb_5000_movies.csv')
credits = pd.read_csv('tmdb_5000_credits.csv')

movies.head(1)

credits.head(1)

movies=movies.merge(credits,on='title')

movies.head(1)

movies =movies[['id','title','overview','keywords','genres','cast','crew']]

movies.head(1)

"""# New Section"""

movies.isnull().sum()

movies.dropna(inplace=True)

movies.duplicated().sum()

movies.iloc[0].genres

#'[{"id": 28, "name": "Action"}, {"id": 12, "name": "Adventure"}, {"id": 14, "name": "Fantasy"}, {"id": 878, "name": "Science Fiction"}]'
#['Action','Adventure','Fantasy','SciFi]

import ast

def convert(obj):

   L=[]
   for i in ast.literal_eval(obj):
     L.append(i['name'])
   return L

movies['genres'] = movies['genres'].apply(convert)

movies['keywords'] = movies['keywords'].apply(convert)

movies.head(1)

def convert3(obj):
  l=[]
  counter=0
  for i in ast.literal_eval(obj):
    if counter!=3:
      l.append(i['name'])
      counter+=1
    else:
      break
  return l

movies['cast']=movies['cast'].apply(convert3)

movies.head(1)

def fetch_director(obj):
  l=[]
  for i in ast.literal_eval(obj):
    if i['job']=='Director':
      l.append(i['name'])
      break
  return l

movies['crew'] = movies['crew'].apply(fetch_director)

movies.head(1)

movies['overview']=movies['overview'].apply(lambda x:x.split())

movies.head(1)

movies['genres']=movies['genres'].apply(lambda x:[i.replace(" ","") for i in x])
movies['keywords']=movies['keywords'].apply(lambda x:[i.replace(" ","") for i in x])
movies['cast']=movies['cast'].apply(lambda x:[i.replace(" ","") for i in x])
movies['crew'] = movies['crew'].apply(lambda x: [i.replace(" ", "") for i in x] if x is not None else []  )

movies['tags']=movies['overview']+movies['genres']+movies['keywords']+movies['cast']+movies['crew']

movies.head(1)

new_df=movies[['id','title','tags']]

new_df

new_df['tags'] = new_df['tags'].apply(lambda x:" ".join(x))

new_df.head(2)

new_df['tags'][0]

new_df['tags']=new_df['tags'].apply(lambda x:x.lower())

new_df.head(1)

import nltk

from nltk.stem.porter import PorterStemmer
ps=PorterStemmer()

def stem(text):
    y=[]

    for i in text.split(): # Corrected the indentation of this line
        ps.stem(i) # Corrected the indentation of this line
        # Added the append operation for the stemmed words to make it functional.
        y.append(ps.stem(i)) # Assuming you want to collect stemmed words in y
    return " ".join(y)
    # Return the list of stemmed words
     # Added a return statement as the function was originally not returning anything

new_df['tags']=new_df['tags'].apply(stem)

"""# New Section"""

from sklearn.feature_extraction.text import CountVectorizer
cv=CountVectorizer(max_features=5000,stop_words='english')

vectors=cv.fit_transform(new_df['tags']).toarray()

vectors[0]

# Instead of using cv.get_feature_names(), use cv.get_feature_names_out():
feature_names = cv.get_feature_names_out()
print(feature_names)

from sklearn.metrics.pairwise import cosine_similarity

similarity=cosine_similarity(vectors)

similarity.shape

similarity[0]

def recommend(movie):
  movie_index=new_df[new_df['title']==movie].index[0]
  distances=similarity[movie_index]
  movies_list=sorted(list(enumerate(distances)),reverse=True,key=lambda x:x[1])[1:6]

  for i in movies_list:
    print(new_df.iloc[i[0]].title)
  return

recommend('Batman Begins')